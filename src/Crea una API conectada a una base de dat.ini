Crea una API conectada a una base de datos e implemente los siguientes endpoints (muy similares a SWAPI.dev or SWAPI.tech):

; [GET] /people Listar todos los registros de people en la base de datos. TODOS LOS PERSONAJES
; [GET] /people/<int:people_id> Muestra la informaci칩n de un solo personaje seg칰n su id. UN SOLO PERSONAJE
; [GET] /planets Listar todos los registros de planets en la base de datos. TODOS LOS PLANETAS
; [GET] /planets/<int:planet_id> Muestra la informaci칩n de un solo planeta seg칰n su id. UN SOLO PLANETA


; [GET] /users Listar todos los usuarios del blog.
; [GET] /users/favorites Listar todos los favoritos que pertenecen al usuario actual.
[POST] /favorite/planet/<int:planet_id> A침ade un nuevo planet favorito al usuario actual con el id = planet_id.
[POST] /favorite/people/<int:people_id> A침ade un nuevo people favorito al usuario actual con el id = people_id.
[DELETE] /favorite/planet/<int:planet_id> Elimina un planet favorito con el id = planet_id.
[DELETE] /favorite/people/<int:people_id> Elimina un people favorito con el id = people_id.
Tu API actual no tiene un sistema de autenticaci칩n (todav칤a), es por eso que la 칰nica forma de crear usuarios es directamente en la base de datos usando el Flask admin.


游닀 Fundamentos
Este ejercicio te permitir치 practicar las siguientes habilidades y conceptos:

Construcci칩n de APIs utilizando el standard REST (a.k.a: RESTful APIs).
Construir una base de datos utilizando el ORM llamado SQLAlchemy o TypeORM.
Utilizar y entender sistemas de migraciones de bases de datos con Alembic o las migraciones nativas de TypeORM (en el caso de node.js).

